---
import _ from "lodash";
import { remark } from "remark";
import remarkHtml from "remark-html";
import { JSDOM } from 'jsdom';
import { LinearClient } from "@linear/sdk";
import Base from "../layouts/Base.astro";
import Column from '../components/Column.astro';

type IssueNode = {
  id: string;
  title: string;
  description: string;
  priority: number;
  priorityLabel: string;
  state: {
    name: string;
  };
};

type ResponseType = {
  issues: {
    nodes: IssueNode[];
  };
};

let byStatus: any = {};
let statuses: any = [];

const linearClient = new LinearClient({ apiKey: import.meta.env.KEY });
const graphQLClient = linearClient.client;
const response = await graphQLClient.rawRequest(`
			query getIssues {
				issues(
					first: 100
					filter: {
						team: { name: { eq: "Homestead" } }
						state: { name: { in: ["Todo", "In Progress", "In Review"] }}
					}
				){
					nodes {
						id
						title
						description
						priority
						priorityLabel
						state {
							name
						}
					}
				}
			}
		`,
  );

    
// Assert the type of 'data' to match 'ResponseType'
const {issues} = response.data as ResponseType;

if (issues) {
  byStatus = _.groupBy(issues.nodes, "state.name") || {};
  statuses = _.uniq(_.map(issues.nodes, "state.name"));
}




const remarkContent = async (content: string) => {
  const file = await remark().use(remarkHtml).process(content);
  const htmlContent = String(file);
  const dom = new JSDOM(htmlContent);
  const document = dom.window.document;
  document.querySelectorAll('a').forEach((a: HTMLAnchorElement) => {
    const textNode = document.createTextNode(a.textContent || '');
    a.replaceWith(textNode);
  });
  const strippedHtml = dom.serialize();
  return strippedHtml;
};

---

<Base title="Landscape Dev Status">
  <Column>
    <h1 class="py-4">Landscape <br /> Development <br /> Status</h1>
    <p class="py-4">
      These are issues the Landscape team is working on at Tlon, pulled directly
      from our issue tracker. Click any issue to see more details.
    </p>
    <p class="py-4">
      If you're wondering about a specific issue, feel free to ask us on the
      network. We're reachable in the "Support" channel of <a
        class="underline decoration-[1.5px] underline-offset-[3px] decoration-neutral-400"
        href="https://tlon.network/lure/~nibset-napwyn/tlon">Tlon Studio</a
      >.
    </p>
    <p class="py-4">
      We also welcome bug reports on <a
        class="underline decoration-[1.5px] underline-offset-[3px] decoration-neutral-400"
        href="https://github.com/tloncorp/landscape-apps/issues/new">GitHub</a
      >.
    </p>
    {
      _.map(statuses, (status: string) => (
        <section class="bugs">
          <h2 class="pt-12 pb-4 font-semibold">{status}</h2>
          {_.map(_.sortBy(byStatus[status], "priority"), (issue: any) => (
            <details class="py-1">
              <summary class="py-1 cursor-pointer">
                {issue.title}&nbsp;<span>({issue.priorityLabel})</span>
              </summary>
              <div class="prose-lg px-4 py-3 border-l-2 border-black text-inherit" set:html={remarkContent(issue.description)} />
            </details>
          ))}
        </section>
      ))
    }
  </main>
</Layout>

<style is:global>
  .bugs {
    hyphens: auto;
  }
  .bugs img {
    display: none;
  }
  .prose-lg ul {
    @apply list-disc list-outside;
  }
  .prose-lg ol {
    @apply list-decimal list-outside;
  }
  .prose-lg pre {
    @apply bg-gray-50 rounded-lg w-full overflow-y-auto;
  }
</style>